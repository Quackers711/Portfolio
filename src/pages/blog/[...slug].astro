---
export const prerender = false;

import { type CollectionEntry, getCollection, getEntry } from 'astro:content';
import { parse } from 'cookie';
import BlogPost from '../../layouts/BlogPost.astro';
import UnlockForm from '../../components/UnlockForm.jsx';
import { render } from 'astro:content';

const { slug } = Astro.params;
const cookies = parse(Astro.request.headers.get('cookie') || '');

const passwords = JSON.parse(import.meta.env.POST_PASSWORDS || '{}');
const expected = passwords[slug];

const hashedPassword = await crypto.subtle.digest(
          'SHA-256',
          new TextEncoder().encode(expected)
        );
        const hashArray = Array.from(new Uint8Array(hashedPassword));
        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');

const unlocked = cookies[`unlocked_${slug}`] === hashHex;

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post) => ({
		params: { slug: post.id },
		props: post,
	}));
}
type Props = CollectionEntry<'blog'>;

// Dynamically fetch the post data at runtime
const post = await getEntry('blog', slug);
if (!post) {
  return Astro.redirect('/404');
}
const { Content } = await render(post);
---

{post.data.locked && !unlocked ? (
	<BlogPost {...post.data}>
	  <UnlockForm slug={slug} client:load />
	</BlogPost>
  ) : (
	<BlogPost {...post.data}>
	  <Content />
	</BlogPost>
  )}
